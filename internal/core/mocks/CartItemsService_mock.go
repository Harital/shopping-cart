// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Harital/shopping-cart/internal/core/ports (interfaces: CartItemsService)
//
// Generated by this command:
//
//	mockgen -destination=../mocks/CartItemsService_mock.go -package=mocks . CartItemsService
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/Harital/shopping-cart/internal/core/model"
	gomock "go.uber.org/mock/gomock"
)

// MockCartItemsService is a mock of CartItemsService interface.
type MockCartItemsService struct {
	ctrl     *gomock.Controller
	recorder *MockCartItemsServiceMockRecorder
}

// MockCartItemsServiceMockRecorder is the mock recorder for MockCartItemsService.
type MockCartItemsServiceMockRecorder struct {
	mock *MockCartItemsService
}

// NewMockCartItemsService creates a new mock instance.
func NewMockCartItemsService(ctrl *gomock.Controller) *MockCartItemsService {
	mock := &MockCartItemsService{ctrl: ctrl}
	mock.recorder = &MockCartItemsServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCartItemsService) EXPECT() *MockCartItemsServiceMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockCartItemsService) Add(arg0 context.Context, arg1 []model.CartItem) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockCartItemsServiceMockRecorder) Add(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockCartItemsService)(nil).Add), arg0, arg1)
}

// Get mocks base method.
func (m *MockCartItemsService) Get(arg0 context.Context) ([]model.CartItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0)
	ret0, _ := ret[0].([]model.CartItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockCartItemsServiceMockRecorder) Get(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockCartItemsService)(nil).Get), arg0)
}
